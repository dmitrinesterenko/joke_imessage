//
//  MessagesViewController.swift
//  Joke MessagesExtension
//
//  Created by Dmitri Nesterenko on 10/28/18.
//  Copyright Â© 2018 Pronounce. All rights reserved.
//

import UIKit
import Messages

// TODO: move this to a different file
extension MessagesViewController: JokesCollectionViewControllerDelegate{
    func didSelectJokeItem(_ item: String){
        NSLog(item)
        //populate the text messages text with the joke
        guard let conversation = activeConversation else { fatalError("Expected a conversation") }
        
        guard let message = composeMessage(with: item, session: (conversation.selectedMessage?.session)!) else { return }
        
        conversation.insert(message) { error in
            if let error = error{
                NSLog("Error occured \(error.localizedDescription)")
            }
        }
        // TODO: not sure if I need this if I'm not using expanded view
        
        dismiss()
        
    }
}
class MessagesViewController: MSMessagesAppViewController {

    var jokesCollectionViewController: JokesCollectionViewController!
    
    override func viewDidLoad() {
        super.viewDidLoad()
        jokesCollectionViewController = UIStoryboard(name: "MainInterface", bundle: nil).instantiateViewController(withIdentifier: "JokesCollectionViewController") as? JokesCollectionViewController

    }
    
    override func viewDidAppear(_ animated: Bool){
        super.viewDidAppear(false)
        self.present(jokesCollectionViewController, animated: true, completion: nil)
    }
    
    // MARK: - Conversation Handling
    
    // TODO: if the delegate implementation will move to a different file then this can no longer be fileprivate
    fileprivate func composeMessage(with joke: String, session: MSSession) -> MSMessage? {
        var components = URLComponents()
        
        let caption = URLQueryItem(name: "caption", value: joke)
        // Note: if joke is a complex object (includes images, etc.) then it will have to be parsed out into individual components from the class properties
        
        let layout = MSMessageTemplateLayout()
        // Note: can be use layout.image
        
        components.queryItems = [caption]
        
        let message = MSMessage(session: session ?? MSSession())
        
        if let conversation = activeConversation,
            let msg = conversation.selectedMessage{
                layout.caption = "$\(msg.senderParticipantIdentifier.uuidString) send you a joke!"
        }
        
        message.url = components.url!
        message.layout = layout
        
        return message
    }
    
    override func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        
        // Use this method to configure the extension and restore previously stored state.
        //TODO: load jokes here
        //
       
    }
    
  
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dissmises the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }
   
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
    
        // Use this to clean up state related to the deleted message.
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
    
        // Use this method to prepare for the change in presentation style.
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
    
        // Use this method to finalize any behaviors associated with the change in presentation style.
    }

}
